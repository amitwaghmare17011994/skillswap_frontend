{
  "info": {
    "name": "SkillSwap API",
    "description": "Complete API collection for SkillSwap backend with authentication",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "description": "Public endpoints - no authentication required",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\",\n  \"skillsToTeach\": [\"<skillObjectId1>\"],\n  \"skillsToLearn\": [\"<skillObjectId2>\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/register",
              "host": ["{{base_url}}"],
              "path": ["users", "register"]
            }
          },
          "description": "Register a new user. skillsToTeach and skillsToLearn must be arrays of Skill ObjectIds."
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/login",
              "host": ["{{base_url}}"],
              "path": ["users", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.token);",
                  "    console.log('Token saved:', response.token);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Google Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"idToken\": \"google-id-token-here\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/google-login",
              "host": ["{{base_url}}"],
              "path": ["users", "google-login"]
            }
          }
        }
      ]
    },
    {
      "name": "üë• Users",
      "description": "Protected endpoints - requires authentication",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            }
          }
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            }
          }
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{jwt_token}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Name\",\n  \"skillsToTeach\": [\"<skillObjectId1>\"],\n  \"skillsToLearn\": [\"<skillObjectId2>\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Update user details. skillsToTeach and skillsToLearn must be arrays of Skill ObjectIds."
          }
        },
        {
          "name": "Search Users by Skill to Teach",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{jwt_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/users/search/by-skill?skillId={{skill_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "search", "by-skill"],
              "query": [
                { "key": "skillId", "value": "{{skill_id}}" }
              ]
            },
            "description": "Find users who can teach a given skill. skillId must be a Skill ObjectId."
          }
        },
        {
          "name": "Add Skill to Teach",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{jwt_token}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"skillId\": \"<skillObjectId>\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/skills/teach",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}", "skills", "teach"]
            },
            "description": "Add a skill to teach. skillId must be a Skill ObjectId or a skill name (if name, a new skill will be created)."
          }
        },
        {
          "name": "Add Skill to Learn",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{jwt_token}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"skillId\": \"<skillObjectId>\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/skills/learn",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}", "skills", "learn"]
            },
            "description": "Add a skill to learn. skillId must be a Skill ObjectId or a skill name (if name, a new skill will be created)."
          }
        },
        {
          "name": "Remove Skill from Teach",
          "request": {
            "method": "DELETE",
            "header": [
              { "key": "Authorization", "value": "Bearer {{jwt_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/skills/teach/{{skill_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}", "skills", "teach", "{{skill_id}}"]
            },
            "description": "Remove a skill from the user's skillsToTeach. skill_id must be a Skill ObjectId."
          }
        },
        {
          "name": "Remove Skill from Learn",
          "request": {
            "method": "DELETE",
            "header": [
              { "key": "Authorization", "value": "Bearer {{jwt_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/skills/learn/{{skill_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}", "skills", "learn", "{{skill_id}}"]
            },
            "description": "Remove a skill from the user's skillsToLearn. skill_id must be a Skill ObjectId."
          }
        }
      ]
    },
    {
      "name": "üéØ Skills",
      "description": "Protected endpoints - requires authentication",
      "item": [
        {
          "name": "Create Skill",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"JavaScript\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/skills",
              "host": ["{{base_url}}"],
              "path": ["skills"]
            }
          }
        },
        {
          "name": "Get All Skills",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/skills",
              "host": ["{{base_url}}"],
              "path": ["skills"]
            }
          }
        },
        {
          "name": "Get Skill by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/skills/{{skill_id}}",
              "host": ["{{base_url}}"],
              "path": ["skills", "{{skill_id}}"]
            }
          }
        },
        {
          "name": "Update Skill",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated JavaScript\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/skills/{{skill_id}}",
              "host": ["{{base_url}}"],
              "path": ["skills", "{{skill_id}}"]
            }
          }
        },
        {
          "name": "Delete Skill",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/skills/{{skill_id}}",
              "host": ["{{base_url}}"],
              "path": ["skills", "{{skill_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üìä Health Check",
      "description": "Public endpoint - no authentication required",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "http://localhost:3000/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "3000",
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "üí¨ Chat",
      "description": "Chat endpoints for user-to-user messaging.\n\nFor real-time chat, connect to ws://localhost:3000 using Socket.IO.\n\nSocket.IO Events:\n- identify: Send your userId after connecting.\n- chat message: Send { senderId, recipientId, content } to send a message.\n- chat message: Listen for incoming messages.\n\nExample (Socket.IO client):\n\n// Connect\nconst socket = io('ws://localhost:3000');\n// Identify\nsocket.emit('identify', userId);\n// Send message\nsocket.emit('chat message', { senderId, recipientId, content });\n// Listen for messages\nsocket.on('chat message', (msg) => { console.log(msg); });\n",
      "item": [
        {
          "name": "Send Message",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{jwt_token}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recipientId\": \"{{user_id}}\",\n  \"content\": \"Hello!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/chat/send",
              "host": ["{{base_url}}"],
              "path": ["chat", "send"]
            }
          }
        },
        {
          "name": "Get Messages",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{jwt_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/chat/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["chat", "{{user_id}}"]
            }
          }
        }
      ]
    }
  ]
} 